#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\GenericEvent as BaseGenericEvent;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Yaml;

if ((!@include __DIR__.'/../../../autoload.php') && (!@include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

$container = new Pimple();

$container['default.date'] = $container->protect(function() {
    $date = new DateTime();

    return $date->format('Y-m-d');
});

$container['slugify'] = $container->protect(function($text) {
    /**
     * From http://sourcecookbook.com/en/recipes/8/function-to-slugify-strings-in-php
     */

    // replace non letter or digits by -
    $text = preg_replace('~[^\\pL\d]+~u', '-', $text);

    // trim
    $text = trim($text, '-');

    // transliterate
    if (function_exists('iconv')) {
        $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
    }

    // lowercase
    $text = strtolower($text);

    // remove unwanted characters
    $text = preg_replace('~[^-\w]+~', '', $text);

    if (empty($text)) {
        return 'n-a';
    }

    return $text;
});

$container['event_dispatcher'] = $container->share(function() {
    return new EventDispatcher();
});

$container['web_dir'] = $container->share(function() {
    return getcwd().'/web';
});

$container['base_dir'] = $container->share(function() {
    return getcwd();
});

$container['config'] = array(
    'site' => array(),
    'enginre' => array(),
);

$container['twig.loader'] = $container->share(function($container) {
    $loader = new Twig_Loader_Filesystem($container['base_dir'].'/layouts');

    $config = $container['config'];
    if (isset($config['engine']['theme_path'])) {
        $themePath = str_replace('%dir%', $container['base_dir'], $config['engine']['theme_path']);
        $loader->addPath($themePath.'/layouts');
        $loader->addPath($container['base_dir']);
    }

    return $loader;
});

$container['twig'] = $container->share(function($container) {
    return new Twig_Environment($container['twig.loader'], array('strict_variables' => true));
});

$application = new Carew\Console\Application();
$application
    ->register('carew:build')
    ->setDescription('Builds static html files from markdown source')
    ->addOption('web-dir', null, InputOption::VALUE_REQUIRED, 'Where to write generated content', getcwd().'/web')
    ->addOption('base-dir', null, InputOption::VALUE_REQUIRED, 'Where locate your content', getcwd())
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($container) {
        $container['base_dir'] = $baseDir = $input->getOption('base-dir');
        $container['web_dir'] = $webDir = $input->getOption('web-dir');

        $dispatcher = $container['event_dispatcher'];

        $dispatcher->addSubscriber(new Carew\EventSubscriber\Metadata\Extraction());
        $dispatcher->addSubscriber(new Carew\EventSubscriber\Metadata\Normalization());
        $dispatcher->addSubscriber(new Carew\EventSubscriber\Metadata\Optimization());
        $dispatcher->addSubscriber(new Carew\EventSubscriber\Body\Markdown());
        $dispatcher->addSubscriber(new Carew\EventSubscriber\Body\Toc());

        $process_document = function($dir, $filenamePattern = '.md', array $extraEvents = array(), $allowEmptyHeader = false) use ($input, $output, $dispatcher) {
            $documents = array();
            if (is_dir($dir)) {
                $finder = new Finder();
                foreach ($finder->in($dir)->files()->name($filenamePattern) as $file) {
                    if ($input->getOption('verbose')) {
                        $output->writeln(sprintf('Processing <info>%s</info>', $file->getRelativePathName()));
                    }

                    $document = array('file' => $file);
                    $event = new GenericEvent($document, array('allowEmptyHeader' => $allowEmptyHeader));
                    try {
                        $event = $dispatcher->dispatch(Carew\Event\Events::DOCUMENT, $event);
                        foreach ($extraEvents as $eventName) {
                            $event = $dispatcher->dispatch($eventName, $event);
                        }

                        $document = $event->getSubject();
                    } catch (\Exception $e) {
                        throw new \LogicException(sprintf('Could not process: "%s". Error: "%s"', (string) $file, $e->getMessage()));
                    }

                    $documents[$document['path']] = $document;
                }
            }

            return $documents;
        };
        // Process Posts
        $posts = $process_document($baseDir.'/posts', '*-*-*-*.md', array(Carew\Event\Events::POST));
        usort($posts, function ($a, $b) {
            return !strcmp($a['date_string'], $b['date_string']);
        });
        $latest = reset($posts);

        // Process Pages
        $pages = $process_document($baseDir.'/pages', '*.md', array(Carew\Event\Events::PAGE));

        // Process Api
        $api = $process_document($baseDir.'/api', '*', array(Carew\Event\Events::API), true);

        $build_collection = function($documents, $key) {
            $collection = array();
            foreach ($documents as $document) {
                if (isset($document['metadata'][$key])) {
                    foreach ($document['metadata'][$key] as $item) {
                        if (!array_key_exists($item, $collection)) {
                            $collection[$item] = array();
                        }

                        $collection[$item][] = $document;
                    }
                }
            }

            return $collection;
        };

        $documents = array_merge($posts, $pages, $api);

        // Process Tags and navigation collections
        $tags       = $build_collection($documents, 'tags');
        $navigation = $build_collection($documents, 'navigation');

        if (file_exists($baseDir.'/config.yml')) {
            $container['config'] = array_replace_recursive($container['config'], Yaml::parse($baseDir.'/config.yml'));
        }

        $config = $container['config'];
        $twig = $container['twig'];
        $twig->addGlobal('document', array('path' => '.'));
        $twig->addGlobal('latest', $latest);
        $twig->addGlobal('pages', $pages);
        $twig->addGlobal('posts', $posts);
        $twig->addGlobal('tags', $tags);
        $twig->addGlobal('navigation', $navigation);
        $twig->addGlobal('relativeRoot', '.');
        $twig->addGlobal('currentPath', '.');
        $twig->addGlobal('site', $config['site']);

        $finder = new Finder();
        $fs = new Filesystem();
        $fs->remove($finder->in($webDir)->exclude(basename(realpath($baseDir))));

        //Â Build page, api and post documents
        foreach ($documents as $document) {
            if ($input->getOption('verbose')) {
                $output->writeln(sprintf('Building <info>%s</info>', $document['path']));
            }
            $relativeRoot = rtrim(str_repeat('../', substr_count($document['path'], DIRECTORY_SEPARATOR) + 1), '/');
            $vars = array(
                'document'     => $document,
                'relativeRoot' => $relativeRoot,
                'currentPath'  => $document['path'],
            );
            if (false !== $document['layout']) {
                $rendered = $twig->render($document['layout'].'.html.twig', $vars);
            } else {
                $rendered = $document['body'];
            }

            $target = $webDir.'/'.$document['path'];
            $fs->mkdir(dirname($target));
            file_put_contents($target, $rendered);
        }

        // Build Tags
        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>Tags</info>');
        }
        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('tags.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#tags\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            foreach ($tags as $tag => $posts) {
                $path = sprintf('tags/%s.%s', $tag, $format);
                $vars = array(
                    'document'     => array(
                        'path'  => $path,
                        'title' => 'Tags: '.$tag,
                    ),
                    'posts'        => $posts,
                    'tag'          => $tag,
                    'relativeRoot' => '..',
                    'currentPath'  => $path,
                );
                $rendered = $twig->render($file, $vars);
                $target = sprintf('%s/%s',$webDir, $path);
                $fs->mkdir(dirname($target));
                file_put_content($target, $rendered);
            }
        }

        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>Index</info>');
        }
        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('index.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#index\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            $path = 'index.'.$format;
            $vars = array(
                'document'     => array(
                    'path'  => $path,
                    'title' => isset($config['site']) ? (isset($config['site']['title']) ? $config['site']['title'] : '' ): '',
                ),
                'relativeRoot' => '.',
                'currentPath'  => $path,
            );
            $rendered = $twig->render($file, $vars);
            $target = "$webDir/$path";
            file_put_content($target, $rendered);
        }

        if (isset($config['engine']['theme_path'])) {
            $themePath = str_replace('%dir%', $container['base_dir'], $config['engine']['theme_path']);
            if (isset($themePath) && is_dir($themePath.'/assets')) {
                $fs->mirror($themePath.'/assets/', $webDir.'/');
            }
        }

        if (is_dir($baseDir.'/assets')) {
            $fs->mirror($baseDir.'/assets/', $webDir.'/', null, array('override' => true));
        }
    })
;

class GenericEvent extends BaseGenericEvent
{
   public function setSubject($subject)
    {
        $this->subject = $subject;

        return $this;
    }
}

$application->run();
