#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Yaml;

if ((!@include __DIR__.'/../../../autoload.php') && (!@include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

$application = new Carew\Carew();
$container = $application->getContainer();
$application
    ->register2('carew:build')
    ->setDescription('Builds static html files from markdown source')
    ->addOption('web-dir', null, InputOption::VALUE_REQUIRED, 'Where to write generated content', getcwd().'/web')
    ->addOption('base-dir', null, InputOption::VALUE_REQUIRED, 'Where locate your content', getcwd())
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($container) {
        $container['base_dir'] = $baseDir = $input->getOption('base-dir');
        $container['web_dir'] = $webDir = $input->getOption('web-dir');

        $extractor = new \Carew\Extractor\Extractor($input, $output, $container['event_dispatcher']);

        // Extract Posts
        $posts = $extractor->extract($baseDir.'/posts', '*-*-*-*.md', array(Carew\Event\Events::POST));
        uasort($posts, function ($a, $b) {
            $aMetadatas = $a->getMetadatas;
            $bMetadatas = $b->getMetadatas;
            if ($aMetadatas['date'] == $bMetadatas['date']) {
                return 0;
            }

            return ($aMetadatas['date'] > $bMetadatas['date']) ? -1 : 1;
        });
        $latest = reset($posts);

        // Extract Pages
        $pages = $extractor->extract($baseDir.'/pages', '*.md', array(Carew\Event\Events::PAGE));

        // Extract Api
        $api = $extractor->extract($baseDir.'/api', '*', array(Carew\Event\Events::API), true);

        $build_collection = function($documents, $key) {
            $collection = array();
            foreach ($documents as $document) {
                $metadatas = $document->getMetadatas();
                if (isset($metadatas[$key]) && is_array($metadatas[$key])) {
                    foreach ($metadatas[$key] as $item) {
                        if (!array_key_exists($item, $collection)) {
                            $collection[$item] = array();
                        }

                        $collection[$item][] = $document;
                    }
                }
            }

            return $collection;
        };

        $documents = array_replace($posts, $pages, $api);

        // Process Tags and navigation collections
        $tags       = $build_collection($documents, 'tags');
        $navigation = $build_collection($documents, 'navigation');

        if (file_exists($baseDir.'/config.yml')) {
            $container['config'] = array_replace_recursive($container['config'], Yaml::parse($baseDir.'/config.yml'));
        }

        $config = $container['config'];
        $twig = $container['twig'];
        $twig->addGlobal('document', array('path' => '.'));
        $twig->addGlobal('latest', $latest);
        $twig->addGlobal('pages', $pages);
        $twig->addGlobal('posts', $posts);
        $twig->addGlobal('tags', $tags);
        $twig->addGlobal('navigation', $navigation);
        $twig->addGlobal('relativeRoot', '.');
        $twig->addGlobal('currentPath', '.');
        $twig->addGlobal('site', $config['site']);

        $finder = new Finder();
        $fs = new Filesystem();
        $fs->remove($finder->in($webDir)->exclude(basename(realpath($baseDir))));

        //Â Build page, api and post documents
        foreach ($documents as $key => $document) {
            if ($input->getOption('verbose')) {
                $output->writeln(sprintf('Building <info>%s</info>', $document->getPath()));
            }
            if (false === $document->getLayout()) {
                $rendered = $document->body;
            } else {
                $rendered = $twig->render($document->getLayout().'.html.twig', array(
                    'document'     => $document,
                    'relativeRoot' => $document->getRootPath(),
                    'currentPath'  => $document->getPath(),
                ));
            }

            $target = $webDir.'/'.$document->getPath();
            $fs->mkdir(dirname($target));
            file_put_contents($target, $rendered);
        }

        // Build Tags
        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>Tags</info>');
        }
        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('tags.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#tags\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            foreach ($tags as $tag => $posts) {
                $path = sprintf('tags/%s.%s', $tag, $format);
                $vars = array(
                    'document'     => array(
                        'path'  => $path,
                        'title' => 'Tags: '.$tag,
                    ),
                    'posts'        => $posts,
                    'tag'          => $tag,
                    'relativeRoot' => '..',
                    'currentPath'  => $path,
                );
                $rendered = $twig->render($file, $vars);
                $target = sprintf('%s/%s',$webDir, $path);
                $fs->mkdir(dirname($target));
                file_put_content($target, $rendered);
            }
        }

        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>Index</info>');
        }
        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('index.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#index\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            $path = 'index.'.$format;
            $vars = array(
                'document'     => array(
                    'path'  => $path,
                    'title' => isset($config['site']) ? (isset($config['site']['title']) ? $config['site']['title'] : '' ): '',
                ),
                'relativeRoot' => '.',
                'currentPath'  => $path,
            );
            $rendered = $twig->render($file, $vars);
            $target = "$webDir/$path";
            file_put_content($target, $rendered);
        }

        if (isset($config['engine']['theme_path'])) {
            $themePath = str_replace('%dir%', $container['base_dir'], $config['engine']['theme_path']);
            if (isset($themePath) && is_dir($themePath.'/assets')) {
                $fs->mirror($themePath.'/assets/', $webDir.'/');
            }
        }

        if (is_dir($baseDir.'/assets')) {
            $fs->mirror($baseDir.'/assets/', $webDir.'/', null, array('override' => true));
        }
    })
;

$application->run();
