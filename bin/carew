#!/usr/bin/env php
<?php

use dflydev\markdown\MarkdownParser;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\GenericEvent as BaseGenericEvent;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Yaml;

if ((!@include __DIR__.'/../../../autoload.php') && (!@include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

$container = new Pimple();

$container['metadata_extraction'] = $container->protect(function(GenericEvent $event) {
    $subject = $event->getSubject();
    $file    = $subject['file'];

    $content = file_get_contents($file);

    preg_match('#^---\n(.+)---\n(.+)$#sU', $content, $matches);

    if (!$matches) {
        if (!$event['allowEmptyHeader']) {
            throw new \RuntimeException('Could not parse front matter in current document');
        }

        $metadata['layout'] = false;
        $body = $content;
    } else {
        list(, $metadata, $body) = $matches;
        $metadata = Yaml::parse($metadata);
    }

    $subject['metadata'] = $metadata;
    $subject['body']     = $body;

    $event->setSubject($subject);
});

$container['metadata_normalization'] = $container->protect(function(GenericEvent $event) {
    $subject = $event->getSubject();
    $metadata = $subject['metadata'];

    foreach (array('tags', 'navigation') as $value) {
        if (isset($metadata[$value]) && !is_array($metadata[$value])) {
            $metadata[$value] = array($metadata[$value]);
        }
    }

    $metadata = array_replace(array(
        'title'      => $subject['file']->getBasename('.md'),
        'navigation' => array(),
        'tags'       => array(),
        'layout'     => 'default',
    ), $metadata);

    $subject = array_replace_recursive(array(
        'metadata' => $metadata,
        'body'     => '',
        'layout'   => $metadata['layout'],
        'path'     => '.',
    ), $subject);

    $event->setSubject($subject);
});

$container['body_markdownify'] = $container->protect(function(GenericEvent $event) {
    $subject = $event->getSubject();
    $body = $subject['body'];

    $markdownParser = new MarkdownParser();
    $subject['body'] = $markdownParser->transformMarkdown($subject['body']);

    $event->setSubject($subject);
});

$container['body_toc_builder'] = $container->protect(function(GenericEvent $event) {
    $subject = $event->getSubject();
    $body = $subject['body'];

    $dom = new DOMDocument();
    $dom->loadHtml($body);
    $xpath = new DOMXPath($dom);

    $toc = array();
    $ids = array();

    $isSpan = function ($node) {
        return XML_ELEMENT_NODE === $node->nodeType && 'span' === $node->tagName;
    };

    $genId = function ($node) use (&$ids, $isSpan) {
        $count = 0;
        do {
            if ($isSpan($node->lastChild)) {
                $node = clone $node;
                $node->removeChild($node->lastChild);
            }

            $id = preg_replace('{[^a-z0-9]}i', '-', strtolower(trim($node->nodeValue)));
            $id = preg_replace('{-+}', '-', $id);
            if ($count) {
                $id .= '-'.($count+1);
            }
            $count++;
        } while (isset($ids[$id]));
        $ids[$id] = true;

        return $id;
    };

    $getDesc = function ($node) use ($isSpan) {
        if ($isSpan($node->lastChild)) {
            return $node->lastChild->nodeValue;
        }

        return null;
    };

    $getTitle = function ($node) use ($isSpan) {
        if ($isSpan($node->lastChild)) {
            $node = clone $node;
            $node->removeChild($node->lastChild);
        }

        return $node->nodeValue;
    };

    // build TOC & deep links
    $h1 = $h2 = $h3 = $h4 = 0;
    $nodes = $xpath->query('//*[self::h1 or self::h2 or self::h3 or self::h4]');
    foreach ($nodes as $node) {
        // set id and add anchor link
        $id = $genId($node);
        $title = $getTitle($node);

        $desc = $getDesc($node);
        $node->setAttribute('id', $id);
        $link = $dom->createElement('a', '#');
        $link->setAttribute('href', '#'.$id);
        $link->setAttribute('class', 'anchor');
        $node->appendChild($link);

        // parse into a tree
        switch ($node->nodeName) {
            case 'h1':
                $toc[++$h1] = array('title' => $title, 'id' => $id, 'desc' => $desc);
            break;

            case 'h2':
                $toc[$h1][++$h2] = array('title' => $title, 'id' => $id, 'desc' => $desc);
            break;

            case 'h3':
                $toc[$h1][$h2][++$h3] = array('title' => $title, 'id' => $id, 'desc' => $desc);
            break;

            case 'h4':
                $toc[$h1][$h2][$h3][++$h4] = array('title' => $title, 'id' => $id, 'desc' => $desc);
            break;
        }
    }

    // save new body with IDs
    $body = $dom->saveHtml();
    $body = preg_replace('{.*<body>(.*)</body>.*}is', '$1', $body);

    $subject['toc'] = $toc;
    $subject['body'] = $body;

    $event->setSubject($subject);
});

$container['metadata_post_optimization'] = $container->protect(function(GenericEvent $event) {
    $subject  = $event->getSubject();
    $file     = $subject['file'];
    $metadata = $subject['metadata'];

    list($year, $month, $day, $slug) = explode('-', $file->getBasename('.md'), 4);

    $date = "$year-$month-$day";

    $metadata = array_replace(array(
        'date'        => new DateTime($date),
        'date_string' => $date,
    ), $metadata);

    $path = "$year/$month/$day/$slug.html";

    $subject['metadata'] = $metadata;
    $subject['path']     = $path;

    $event->setSubject($subject);
});

$container['metadata_page_optimization'] = $container->protect(function(GenericEvent $event) {
    $subject = $event->getSubject();
    $file    = $subject['file'];

    $slug = $file->getBasename('.md');

    $subject['path'] = $file->getRelativePath()
        ? sprintf('%s/%s.html', $file->getRelativePath(), $slug)
        : $slug.'.html';

    $event->setSubject($subject);
});

$container['metadata_api_optimization'] = $container->protect(function(GenericEvent $event) {
    $subject = $event->getSubject();
    $file = $subject['file'];

    $subject['path'] = sprintf('api/%s',$file->getRelativePathname());

    $event->setSubject($subject);
});

$console = new Application();
$console
    ->register('build')
    ->setDescription('Builds static html files from markdown source')
    ->addOption('web-dir', null, InputOption::VALUE_REQUIRED, 'Where to write generated content', getcwd().'/web')
    ->addOption('base-dir', null, InputOption::VALUE_REQUIRED, 'Where locate your content', getcwd())
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($container) {
        $baseDir =$input->getOption('base-dir');
        $webDir = $input->getOption('web-dir');

        $dispatcher = new EventDispatcher();

        $dispatcher->addListener('carew', $container['metadata_extraction']);
        $dispatcher->addListener('carew', $container['metadata_normalization']);
        $dispatcher->addListener('carew', $container['body_markdownify']);

        $dispatcher->addListener('carew_page', $container['metadata_page_optimization']);
        $dispatcher->addListener('carew_page', $container['body_toc_builder']);
        $dispatcher->addListener('carew_post', $container['metadata_post_optimization']);
        $dispatcher->addListener('carew_post', $container['body_toc_builder']);
        $dispatcher->addListener('carew_api', $container['metadata_api_optimization']);

        $process_document = function($dir, $filenamePattern = '.md', array $extraEvents = array(), $allowEmptyHeader = false) use ($input, $output, $dispatcher) {
            $documents = array();
            if (is_dir($dir)) {
                $finder = new Finder();
                foreach ($finder->in($dir)->files()->name($filenamePattern) as $file) {
                    if ($input->getOption('verbose')) {
                        $output->writeln(sprintf('Processing <info>%s</info>', $file->getRelativePathName()));
                    }

                    $document = array('file' => $file);
                    $event = new GenericEvent($document, array('allowEmptyHeader' => $allowEmptyHeader));
                    try {
                        $event = $dispatcher->dispatch('carew', $event);
                        foreach ($extraEvents as $eventName) {
                            $event = $dispatcher->dispatch($eventName, $event);
                        }

                        $document = $event->getSubject();
                    } catch (\Exception $e) {
                        throw new \LogicException(sprintf('Could not process: "%s". Error: "%s"', (string) $file, $e->getMessage()));
                    }

                    $documents[$document['path']] = $document;
                }
            }

            return $documents;
        };
        // Process Posts
        $posts = $process_document($baseDir.'/posts', '*-*-*-*.md', array('carew_post'));
        usort($posts, function ($a, $b) {
            return !strcmp($a['date_string'], $b['date_string']);
        });
        $latest = reset($posts);

        // Process Pages
        $pages = $process_document($baseDir.'/pages', '*.md', array('carew_page'));

        // Process Api
        $api = $process_document($baseDir.'/api', '*', array('carew_api'), true);

        $build_collection = function($documents, $key) {
            $collection = array();
            foreach ($documents as $document) {
                if (isset($document['metadata'][$key])) {
                    foreach ($document['metadata'][$key] as $item) {
                        if (!array_key_exists($item, $collection)) {
                            $collection[$item] = array();
                        }

                        $collection[$item][] = $document;
                    }
                }
            }

            return $collection;
        };

        $documents = array_merge($posts, $pages, $api);

        // Process Tags and navigation collections
        $tags       = $build_collection($documents, 'tags');
        $navigation = $build_collection($documents, 'navigation');

        $finder = new Finder();
        $fs = new Filesystem();
        $fs->remove($finder->in($webDir)->exclude('_carew'));

        $config = array(
            'site'   => array(),
            'engine' => array(),
        );
        if (file_exists($baseDir.'/config.yml')) {
            $config = array_replace_recursive($config, Yaml::parse($baseDir.'/config.yml'));
        }

        $loader = new Twig_Loader_Filesystem($baseDir.'/layouts');
        if (isset($config['engine']['theme_path'])) {
            $themePath = str_replace('%dir%', $baseDir, $config['engine']['theme_path']);
            $loader->addPath($themePath.'/layouts');
            $loader->addPath($baseDir);
        }

        $twig = new Twig_Environment($loader, array('strict_variables' => true));
        $twig->addGlobal('document', array('path' => '.'));
        $twig->addGlobal('latest', $latest);
        $twig->addGlobal('pages', $pages);
        $twig->addGlobal('posts', $posts);
        $twig->addGlobal('tags', $tags);
        $twig->addGlobal('navigation', $navigation);
        $twig->addGlobal('relativeRoot', '.');
        $twig->addGlobal('currentPath', '.');
        $twig->addGlobal('site', $config['site']);

        // Build page, api and post documents
        foreach ($documents as $document) {
            if ($input->getOption('verbose')) {
                $output->writeln(sprintf('Building <info>%s</info>', $document['path']));
            }
            $relativeRoot = rtrim(str_repeat('../', substr_count($document['path'], DIRECTORY_SEPARATOR) + 1), '/');
            $vars = array(
                'document'     => $document,
                'relativeRoot' => $relativeRoot,
                'currentPath'  => $document['path'],
            );
            if (false !== $document['layout']) {
                $rendered = $twig->render($document['layout'].'.html.twig', $vars);
            } else {
                $rendered = $document['body'];
            }

            $target = $webDir.'/'.$document['path'];
            $fs->mkdir(dirname($target));
            file_put_contents($target, $rendered);
        }

        // Build Tags
        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>Tags</info>');
        }
        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('tags.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#tags\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            foreach ($tags as $tag => $posts) {
                $path = sprintf('tags/%s.%s', $tag, $format);
                $vars = array(
                    'document'     => array(
                        'path'  => $path,
                        'title' => 'Tags: '.$tag,
                    ),
                    'posts'        => $posts,
                    'tag'          => $tag,
                    'relativeRoot' => '..',
                    'currentPath'  => $path,
                );
                $rendered = $twig->render($file, $vars);
                $target = sprintf('%s/%s',$webDir, $path);
                $fs->mkdir(dirname($target));
                file_put_content($target, $rendered);
            }
        }

        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>Index</info>');
        }
        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('index.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#index\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            $path = 'index.'.$format;
            $vars = array(
                'document'     => array(
                    'path'  => $path,
                    'title' => isset($config['site']) ? (isset($config['site']['title']) ? $config['site']['title'] : '' ): '',
                ),
                'relativeRoot' => '.',
                'currentPath'  => $path,
            );
            $rendered = $twig->render($file, $vars);
            $target = "$webDir/$path";
            file_put_content($target, $rendered);
        }

        if (isset($themePath) && is_dir($themePath.'/assets')) {
            $fs->mirror($themePath.'/assets/', $webDir.'/');
        }
        if (is_dir($baseDir.'/assets')) {
            $fs->mirror($baseDir.'/assets/', $webDir.'/', null, array('override' => true));
        }
    })
;

class GenericEvent extends BaseGenericEvent
{
   public function setSubject($subject)
    {
        $this->subject = $subject;

        return $this;
    }
}

$console->run();
