#!/usr/bin/env php
<?php

use dflydev\markdown\MarkdownParser;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Yaml;

if ((!@include __DIR__.'/../../../autoload.php') && (!@include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

$console = new Application();
$console
    ->register('build')
    ->setDescription('Builds static html files from markdown source')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $baseDir = getcwd();
        $webDir = $baseDir.'/web';

        $parse_metadata = function ($contents) {
            preg_match('#---\n(.+)---\n(.+)#s', $contents, $matches);
            if (!$matches) {
                throw new \RuntimeException('Could not parse front matter in current document');
            }

            list(, $rawInfo, $rawBody) = $matches;

            $info = Yaml::parse($rawInfo);

            $markdownParser = new MarkdownParser();
            $body = $markdownParser->transformMarkdown($rawBody);

            return array($info, $body);
        };

        $parse_post = function (SplFileInfo $file, $contents) use ($parse_metadata) {
            list($info, $body) = $parse_metadata($contents);

            list($year, $month, $day, $slug) = explode('-', $file->getBasename('.md'), 4);

            $date = "$year-$month-$day";
            $path = "$year/$month/$day/$slug.html";

            $post = array_replace(array(
                'body'          => $body,
                'path'          => $path,
                'date'          => new DateTime($date),
                'date_string'   => $date,
            ), $info);

            return $post;
        };

        $parse_page = function (SplFileInfo $file, $contents) use ($parse_metadata) {
            list($info, $body) = $parse_metadata($contents);

            $slug = $file->getBasename('.md');

            $path = $file->getRelativePath()
                ? sprintf('%s/%s.html', $file->getRelativePath(), $slug)
                : $slug.'.html';

            $page = array_replace(array(
                'body'          => $body,
                'path'          => $path,
            ), $info);

            return $page;
        };

        $process_document = function($dir, $parse_document, $filenamePattern = '.md') use($input, $output) {
            $documents = array();
            if (is_dir($dir)) {
                $finder = new Finder();
                foreach ($finder->in($dir)->files()->name($filenamePattern) as $file) {
                    if ($input->getOption('verbose')) {
                        $output->writeln(sprintf('Processing <info>%s</info>', $file->getRelativePathName()));
                    }

                    $contents = file_get_contents($file);

                    try {
                        $document = $parse_document($file, $contents);
                    } catch (\Exception $e) {
                        throw new \LogicException(sprintf('Could not process: "%s". Error: "%s"', (string) $file, $e->getMessage()));
                    }

                    $document = array_replace(array('layout' => 'default'), $document);
                    $document['file'] = $file;

                    $documents[$document['path']] = $document;
                }
            }

            return $documents;
        };


        $posts = $process_document($baseDir.'/posts', $parse_post, '*-*-*-*.md');
        $pages = $process_document($baseDir.'/pages', $parse_page, '*.md');

        $fs = new Filesystem();
        $fs->remove($webDir);

        $loader = new Twig_Loader_Filesystem($baseDir.'/layouts');
        $twig = new Twig_Environment($loader, array('strict_variables' => true));

        foreach (array_merge($posts, $pages) as $document) {
            $relativeRoot = rtrim(str_repeat('../', substr_count($document['path'], DIRECTORY_SEPARATOR) + 1), '/');
            $vars = array('document' => $document, 'relativeRoot' => $relativeRoot);
            $rendered = $twig->render($document['layout'].'.html.twig', $vars);

            $target = $webDir.'/'.$document['path'];
            $fs->mkdir(dirname($target));
            file_put_contents($target, $rendered);
        }

        if ($input->getOption('verbose')) {
            $output->writeln('Building <info>index</info>');
        }

        usort($posts, function ($a, $b) {
            return !strcmp($a['date_string'], $b['date_string']);
        });

        $latest = reset($posts);

        $finder = new Finder();
        foreach ($finder->in($baseDir.'/layouts/')->files()->name('index.*.twig') as $file) {
            $file = $file->getBasename();

            preg_match('#index\.(.+?)\.twig$#', $file, $match);
            $format = $match[1];

            $vars = array(
                'posts'        => $posts,
                'latest'       => $latest,
                'pages'        => $pages,
                'relativeRoot' => '.',
            );

            $rendered = $twig->render($file, $vars);
            $target = $webDir.'/index.'.$format;
            file_put_contents($target, $rendered);
        }

        if (is_dir($baseDir.'/assets')) {
            $fs->mirror($baseDir.'/assets/', $webDir.'/');
        }
    })
;
$console->run();
